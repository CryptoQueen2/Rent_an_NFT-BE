// SPDX-License-Identifier: MIT
pragma solidity 0.8.6;

interface KeeperCompatibleInterface {
    function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);
    function performUpkeep(bytes calldata performData) external;
}

contract Counter is KeeperCompatibleInterface {

    uint public counter;    // Public counter variable

    // Use an interval in seconds and a timestamp to slow execution of Upkeep
    uint public immutable interval;
    uint public lastTimeStamp;    

    constructor(uint updateInterval) {
      interval = updateInterval;
      lastTimeStamp = block.timestamp;
      counter = 0;
    }

    function checkUpkeep(bytes calldata checkData) external view override returns (bool upkeepNeeded, bytes memory performData) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        performData = checkData;
    }

    function balance() public view returns (uint256) {
        return address(this).balance;

    }

    function performUpkeep(bytes calldata) external override {
        lastTimeStamp = block.timestamp;
        require(address(this).balance > 0);
       
    }

}

//

Smart contract Push on Mumbai TestNet

https://mumbai.polygonscan.com/tx/0x7c9db363d65373fdad95c3aa34587ea8012d65b3d12e31bbab896e3266064bb2

UpKeep transaction

https://mumbai.polygonscan.com/tx/0x9a6ec47a7f56b35066d8a21eea4aa9b14e6c0b15bed90ab49168a8e6cc7d41a0

Viewing UpKeep on Mumbai TestNet

https://keepers.chain.link/mumbai/225

//
